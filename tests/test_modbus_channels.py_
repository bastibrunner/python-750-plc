# pylint: disable=missing-function-docstring,missing-module-docstring,missing-class-docstring

from unittest.mock import Mock, patch
from wg750xxx.modules.modbus import (
    ModbusConnection
)
import pytest

@pytest.fixture
def mock_modbus_client():
    with patch('pymodbus.client.tcp.ModbusTcpClient') as mock:
        # Setup common mock responses
        mock.return_value.read_coils.return_value.bits = [True]
        mock.return_value.read_discrete_inputs.return_value.bits = [False]
        mock.return_value.read_input_registers.return_value.registers = [42]
        mock.return_value.read_holding_registers.return_value.registers = [24]
        yield mock

@pytest.fixture
def modbus_connection(mock_modbus_client):
    return ModbusConnection(host="dummy", port=502)

class TestModbusChannel1BitOutput:
    def test_read(self, modbus_connection):
        channel = ModbusChannel1BitOutput(address=0, connection=modbus_connection)
        assert channel.read() is True
        modbus_connection.client.read_coils.assert_called_once_with(0, 1)

    def test_write(self, modbus_connection):
        channel = ModbusChannel1BitOutput(address=0, connection=modbus_connection)
        channel.write(True)
        modbus_connection.client.write_coil.assert_called_once_with(0, True)

class TestModbusChannel1BitInput:
    def test_read(self, modbus_connection):
        channel = ModbusChannel1BitInput(address=0, connection=modbus_connection)
        assert channel.read() is False
        modbus_connection.client.read_discrete_inputs.assert_called_once_with(0, 1)

    def test_write_raises(self, modbus_connection):
        channel = ModbusChannel1BitInput(address=0, connection=modbus_connection)
        with pytest.raises(NotImplementedError):
            channel.write(True)

class TestModbusChannel16BitInput:
    def test_read(self, modbus_connection):
        channel = ModbusChannel16BitInput(address=0, connection=modbus_connection)
        assert channel.read() == 42
        modbus_connection.client.read_input_registers.assert_called_once_with(0, 1)

    def test_write_raises(self, modbus_connection):
        channel = ModbusChannel16BitInput(address=0, connection=modbus_connection)
        with pytest.raises(NotImplementedError):
            channel.write(42)

class TestModbusChannel16BitOutput:
    def test_read(self, modbus_connection):
        channel = ModbusChannel16BitOutput(address=0, connection=modbus_connection)
        assert channel.read() == 24
        modbus_connection.client.read_holding_registers.assert_called_once_with(0, 1)

    def test_write(self, modbus_connection):
        channel = ModbusChannel16BitOutput(address=0, connection=modbus_connection)
        channel.write(24)
        modbus_connection.client.write_register.assert_called_once_with(0, 24)

class TestChannelFactory:
    def test_create_channels(self, modbus_connection):
        count = {
            "coil": 2,
            "discrete": 1,
            "input": 3,
            "holding": 2
        }
        address = {
            "coil": 0,
            "discrete": 100,
            "input": 200,
            "holding": 300
        }

        channels = ModbusChannel16BitOutput.create_channels(
            count=count,
            address=address,
            connection=modbus_connection
        )

        # Verify channel types and counts
        assert len(channels["coil"]) == 2
        assert len(channels["discrete"]) == 1
        assert len(channels["input"]) == 3
        assert len(channels["holding"]) == 2

        # Verify correct class types
        assert isinstance(channels["coil"][0], ModbusChannel1BitOutput)
        assert isinstance(channels["discrete"][0], ModbusChannel1BitInput)
        assert isinstance(channels["input"][0], ModbusChannel16BitInput)
        assert isinstance(channels["holding"][0], ModbusChannel16BitOutput)

        # Verify addresses
        assert channels["coil"][0].address == 0
        assert channels["coil"][1].address == 1
        assert channels["discrete"][0].address == 100
        assert channels["input"][0].address == 200
        assert channels["holding"][0].address == 300
